generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String    @unique
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts            Account[]
  activateTokens      ActivateToken[]
  trips               Trip[]
  tripParticipants    TripParticipant[]
  invitedParticipants TripParticipant[] @relation("InvitedBy")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model ActivateToken {
  id          String    @id @default(uuid())
  userId      String
  token       String    @unique
  activatedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Trip {
  id                 String         @id @default(uuid())
  title              String
  description        String?
  destinationCountry String?
  destinationCity    String?
  startDate          DateTime?
  endDate            DateTime?
  status             TripStatus     @default(planning)
  visibility         TripVisibility @default(participants_only)
  createdBy          String
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  creator      User              @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  participants TripParticipant[]
}

enum TripStatus {
  planning
  confirmed
  ongoing
  completed
  cancelled
}

enum TripVisibility {
  private
  participants_only
  public
}

model TripParticipant {
  id        String                @id @default(uuid())
  tripId    String
  userId    String
  role      TripParticipantRole   @default(member)
  status    TripParticipantStatus @default(invited)
  invitedBy String?
  joinedAt  DateTime?
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt

  trip    Trip  @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  inviter User? @relation("InvitedBy", fields: [invitedBy], references: [id], onDelete: Cascade)

  @@unique([tripId, userId])
}

enum TripParticipantRole {
  owner
  member
}

enum TripParticipantStatus {
  invited
  accepted
  declined
}
